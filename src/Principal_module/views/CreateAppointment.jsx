import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './CreateAppointment.css';

const CreateAppointment = ({ selectedDate, onClose, onSave }) => {
    const [formData, setFormData] = useState({
        PacienteID: '',
        NumeroHistoria: '',
        NombrePaciente: '',
        ApellidoPaciente: '',
        DNI: '',
        MedicoID: '',
        MotivoCita: '',
        DescripcionCita: '',
        FechaCita: selectedDate || '',
        HoraCita: '',
        Estado: 'Pendiente',
    });
    const [autoGeneratedHistoria, setAutoGeneratedHistoria] = useState(false);
    const [doctores, setDoctores] = useState([]);

    // Cargar la lista de doctores al cargar el componente
    useEffect(() => {
        const fetchDoctores = async () => {
            try {
                const response = await axios.get('/api/usuarios/doctores'); // Usa el endpoint actualizado
                console.log("Doctores:", response.data); // Verifica la respuesta en la consola
                setDoctores(response.data);
            } catch (error) {
                console.error('Error al cargar los doctores:', error);
            }
        };
    
        fetchDoctores();
    }, []);

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleBuscarHistoria = async () => {
        const historia = formData.NumeroHistoria;
        if (historia) {
            try {
                const response = await axios.get(`/api/pacientes/historia/${historia}`);
                if (response.data) {
                    const { Nombre, Apellido, DNI } = response.data;
                    setFormData((prevFormData) => ({
                        ...prevFormData,
                        NombrePaciente: Nombre,
                        ApellidoPaciente: Apellido,
                        DNI,
                    }));
                } else {
                    alert('Paciente no encontrado');
                    setFormData((prevFormData) => ({
                        ...prevFormData,
                        NombrePaciente: '',
                        ApellidoPaciente: '',
                        DNI: '',
                    }));
                }
            } catch (error) {
                console.error('Error al buscar el paciente:', error);
            }
        } else {
            alert('Ingrese un número de historia');
        }
    };

    const handleAutoGenerateHistoria = () => {
        setAutoGeneratedHistoria(!autoGeneratedHistoria);
        if (!autoGeneratedHistoria) {
            const uniqueHistoria = `HIST-${Date.now()}`;
            setFormData({
                ...formData,
                NumeroHistoria: uniqueHistoria,
                NombrePaciente: '',
                ApellidoPaciente: '',
                DNI: '',
            });
        } else {
            setFormData({ ...formData, NumeroHistoria: '' });
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            await axios.post('/api/citas', formData);
            alert('Cita creada con éxito');
            onSave();
        } catch (error) {
            console.error('Error al crear la cita:', error);
            alert('Hubo un error al crear la cita');
        }
    };

    return (
        <div className="appointment-form-container">
            <form onSubmit={handleSubmit} className="appointment-form">
                <h2>Crear Cita</h2>

                <div className="form-group">
                    <label>Número de Historia:</label>
                    <div style={{ display: 'flex' }}>
                        <input
                            type="text"
                            name="NumeroHistoria"
                            value={formData.NumeroHistoria}
                            onChange={(e) => setFormData({ ...formData, NumeroHistoria: e.target.value })}
                            disabled={autoGeneratedHistoria}
                            style={{ marginRight: '8px' }}
                        />
                        <button type="button" onClick={handleBuscarHistoria}>
                            Buscar
                        </button>
                    </div>
                    <div className="checkbox-group">
                        <input
                            type="checkbox"
                            checked={autoGeneratedHistoria}
                            onChange={handleAutoGenerateHistoria}
                        />
                        <label>No tiene número de historia (generar uno único)</label>
                    </div>
                </div>

                <div className="form-group">
                    <label>Nombre del Paciente:</label>
                    <input
                        type="text"
                        name="NombrePaciente"
                        value={formData.NombrePaciente}
                        onChange={handleChange}
                    />
                </div>

                <div className="form-group">
                    <label>Apellido del Paciente:</label>
                    <input
                        type="text"
                        name="ApellidoPaciente"
                        value={formData.ApellidoPaciente}
                        onChange={handleChange}
                    />
                </div>

                <div className="form-group">
                    <label>DNI:</label>
                    <input
                        type="text"
                        name="DNI"
                        value={formData.DNI}
                        onChange={handleChange}
                    />
                </div>

                <div className="form-group">
                    <label>Nombre del Doctor:</label>
                    <select name="MedicoID" value={formData.MedicoID} onChange={handleChange}>
                        <option value="">Seleccione un doctor</option>
                        {doctores.map((doctor) => (
                            <option key={doctor.UsuarioID} value={doctor.UsuarioID}>
                                {doctor.Nombre} {doctor.Apellido}
                            </option>
                        ))}
                    </select>
                </div>

                <div className="form-group">
                    <label>Motivo de Cita:</label>
                    <input type="text" name="MotivoCita" value={formData.MotivoCita} onChange={handleChange} />
                </div>

                <div className="form-group">
                    <label>Descripción de la Cita:</label>
                    <textarea name="DescripcionCita" value={formData.DescripcionCita} onChange={handleChange}></textarea>
                </div>

                <div className="form-group">
                    <label>Fecha de Cita:</label>
                    <input type="date" name="FechaCita" value={formData.FechaCita} onChange={handleChange} />
                </div>

                <div className="form-group">
                    <label>Hora de Cita:</label>
                    <input type="time" name="HoraCita" value={formData.HoraCita} onChange={handleChange} />
                </div>

                <div className="form-group">
                    <label>Estado:</label>
                    <select name="Estado" value={formData.Estado} onChange={handleChange}>
                        <option value="Pendiente">Pendiente</option>
                        <option value="Completada">Completada</option>
                        <option value="Cancelada">Cancelada</option>
                    </select>
                </div>

                <div className="form-buttons">
                    <button type="submit">Crear Cita</button>
                    <button type="button" onClick={onClose}>Cancelar</button>
                </div>
            </form>
        </div>
    );
};

export default CreateAppointment;
